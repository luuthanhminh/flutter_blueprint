// Mocks generated by Mockito 5.0.9 from annotations
// in fl_blueprint/test/cards_viewmodel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:fl_blueprint/app/services/dialog_service.dart' as _i5;
import 'package:fl_blueprint/app/services/navigation_service.dart' as _i2;
import 'package:fl_blueprint/domain/entities/dcard.dart' as _i7;
import 'package:fl_blueprint/domain/usecases/fetch_cards_usecase.dart' as _i6;
import 'package:flutter/src/widgets/navigator.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i2.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<T?> pushNamed<T extends Object>(String? routeName,
          {Object? args}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [routeName], {#args: args}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> push<T extends Object>(_i4.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#push, [route]),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushReplacementNamed<T extends Object, TO extends Object>(
          String? routeName,
          {Object? args}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacementNamed, [routeName], {#args: args}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushNamedAndRemoveUntil<T extends Object>(String? routeName,
          {Object? args, bool Function(_i4.Route<dynamic>)? predicate}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamedAndRemoveUntil, [routeName],
              {#args: args, #predicate: predicate}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<T?> pushAndRemoveUntil<T extends Object>(_i4.Route<T>? route,
          {bool Function(_i4.Route<dynamic>)? predicate}) =>
      (super.noSuchMethod(
          Invocation.method(
              #pushAndRemoveUntil, [route], {#predicate: predicate}),
          returnValue: Future<T?>.value()) as _i3.Future<T?>);
  @override
  _i3.Future<bool> maybePop<T extends Object>([Object? args]) =>
      (super.noSuchMethod(Invocation.method(#maybePop, [args]),
          returnValue: Future<bool>.value(false)) as _i3.Future<bool>);
  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);
  @override
  void goBack<T extends Object>({T? result}) =>
      super.noSuchMethod(Invocation.method(#goBack, [], {#result: result}),
          returnValueForMissingStub: null);
  @override
  void popUntil(String? route) =>
      super.noSuchMethod(Invocation.method(#popUntil, [route]),
          returnValueForMissingStub: null);
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i5.DialogService {
  MockDialogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> showLoading() =>
      (super.noSuchMethod(Invocation.method(#showLoading, []),
          returnValue: Future<dynamic>.value()) as _i3.Future<dynamic>);
  @override
  void hideLoading() => super.noSuchMethod(Invocation.method(#hideLoading, []),
      returnValueForMissingStub: null);
}

/// A class which mocks [FetchCardsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockFetchCardsUseCase extends _i1.Mock implements _i6.FetchCardsUseCase {
  MockFetchCardsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i7.DCard>> perform({Object? param}) =>
      (super.noSuchMethod(Invocation.method(#perform, [], {#param: param}),
              returnValue: Future<List<_i7.DCard>>.value(<_i7.DCard>[]))
          as _i3.Future<List<_i7.DCard>>);
}
